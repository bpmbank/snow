require('shelljs/global')
config.silent = true
var request = require('request')

var exec = function() {
    var result = global.exec.apply(this, arguments)
    if (result.code) throw new Error(result.output)
    return result.output
}

task('clean', function() {
    rm('-Rf', 'build/*')
})

task('app', [
    'build/head.js',
    'build/scripts.js',
    'build/styles.css',
    'build/index.html',
    'build/img',
    'build/img/registerbg.jpg',
    'build/img/flags',
    'build/img/flags/NO.png',
    'build/img/flags/US.png',
    'build/img/flags/ES.png'
//    'build/what-is-bitcoin.mp4',
//    'build/what-is-ripple.mp4',
//    'build/landing.mp4',
//    'build/what-is-bitcoin.ogv',
//    'build/what-is-ripple.ogv',
//    'build/landing.ogv'
])

task('dist', [
    'build/head.min.js',
    'build/scripts.min.js',
    'build/styles.min.css',
    'build/index.min.html',
    'build/ripple.txt',
    'build/img',
    'build/img/registerbg.jpg',
    'build/img/flags',
    'build/img/flags/NO.png',
    'build/img/flags/ES.png',
    'build/img/flags/US.png'
//    'build/what-is-bitcoin.mp4',
//    'build/what-is-ripple.mp4',
//    'build/landing.mp4',
//    'build/what-is-bitcoin.ogv',
//    'build/what-is-ripple.ogv',
//    'build/landing.ogv'
])

directory('build')
directory('build/img')
directory('build/img/flags')

var head = [
    'build/raven.min.js'
]

var vendor = [
    'build/jquery.min.js',
    'build/jquery.cookie.js',
    'build/sjcl.js',
    'build/alertify.min.js',
    'build/bootstrap.min.js'
]

file('build/jquery.min.js', ['components/jquery/jquery.min.js'], cpTask)
file('build/sjcl.js', ['vendor/sjcl.js'], cpTask)
file('build/jquery.cookie.js', ['vendor/jquery.cookie.js'], cpTask)
file('build/alertify.min.js', ['components/alertify/alertify.min.js'], cpTask)
file('build/bootstrap.min.js', ['vendor/bootstrap/js/bootstrap.min.js'], cpTask)
file('build/ripple.txt', ['assets/ripple.txt'], cpTask)
file('build/raven.min.js', ['vendor/raven.min.js'], cpTask)
file('build/img/registerbg.jpg', ['assets/img/registerbg.jpg'], cpTask)
file('build/img/flags/NO.png', ['assets/img/flags/NO.png'], cpTask)
file('build/img/flags/US.png', ['assets/img/flags/US.png'], cpTask)
//file('build/landing.mp4', ['assets/landing.mp4'], cpTask)
//file('build/what-is-bitcoin.mp4', ['assets/what-is-bitcoin.mp4'], cpTask)
//file('build/what-is-ripple.mp4', ['assets/what-is-ripple.mp4'], cpTask)
//file('build/landing.ogv', ['assets/landing.ogv'], cpTask)
//file('build/what-is-bitcoin.ogv', ['assets/what-is-bitcoin.ogv'], cpTask)
//file('build/what-is-ripple.ogv', ['assets/what-is-ripple.ogv'], cpTask)
file('build/img/flags/ES.png', ['assets/img/flags/ES.png'], cpTask)

function cpTask() {
    cp(this.prereqs[0], this.name)
}

file('build/scripts.min.js', ['build/scripts.js'], compressJs)
file('build/head.min.js', ['build/head.js'], compressJs)
file('build/styles.min.css', ['build/styles.css'], compressCss)

file('build/index.html', ['build'], function() {
    var ejs = require('ejs')
    ejs.render(cat('assets/index.ejs'), {
        minifyHead: false,
        minifyScripts: false,
        minifyCss: false,
        segment: segment
    })
    .to(this.name)
})

file('build/index.min.html', ['build'], function() {
    var ejs = require('ejs')
    ejs.render(cat('assets/index.ejs'), {
        minifyHead: true,
        minifyScripts: false,
        minifyCss: true,
        segment: segment
    })
    .to(this.name)
})

file('build/styles.css', ['build'], function() {
    exec('stylus assets/app.styl -o build');
    (cat('components/alertify/themes/alertify.core.css') + '\n' +
    cat('components/alertify/themes/alertify.bootstrap.css') + '\n' +
    cat('vendor/bootstrap/css/bootstrap.min.css') + '\n' +
    cat('vendor/bootstrap/css/bootstrap-responsive.min.css') + '\n' +
    cat('build/app.css') + '\n')
    .to(this.name)
})

file('build/scripts.js', ['build'].concat(vendor), function() {
    var v = vendor.reduce(function(p, c) {
        return p + ';' + cat(c)
    }, '')
    , bundle = exec('browserify -d -t ./node_modules/browserify-ejs ./entry.js')
    , scripts = v + ';' + bundle
    scripts.to(this.name)
})

file('build/head.js', ['build'].concat(head), function() {
    head.reduce(function(p, c) {
        return p + ';' + cat(c)
    }, '')
    .to(this.name)
})

function compressCss() {
    var inputFn = this.name.replace(/min\.css$/, 'css')
    exec('cleancss ' + inputFn).to(this.name)
}

function compressJs() {
    var inputFn = this.name.replace(/min\.js$/, 'js')
    exec('uglifyjs ' + inputFn + ' --compress warnings=false --mangle').to(this.name)
}

// hosting locally
task('host', ['app'], function() {
    var express = require('express')
    , app = express()
    , server = require('http').createServer(app)
    , proxy = require('http-proxy').createServer(function(req, res, proxy) {
        if (req.url.match(/^\/api\//)) {
            // remove /api prefix
            req.url = req.url.substr(4)
            return proxy.proxyRequest(req, res, {
                host: 'localhost',
                port: 5071
            })
        }
        proxy.proxyRequest(req, res, {
            host: 'localhost',
            port: 5072
        })
    })
    proxy.listen(5073)
    app.use(express.static('build'))
    server.listen(5072)
    console.log('hosting at http://localhost:5073')
    return server
})

function publish(hostname, cb) {
    var async = require('async')
    , files = {
        'head.min.js': null,
        'scripts.js': null,
        'styles.min.css': null,
        'index.min.html': 'index.html',
        'ripple.txt': 'ripple.txt',
        'img/registerbg.jpg': null,
        //'landing.mp4': null,
        //'what-is-bitcoin.mp4': null,
        //'what-is-ripple.mp4': null,
        //'landing.ogv': null,
        //'what-is-bitcoin.ogv': null,
        //'what-is-ripple.ogv': null,
        'img/flags/NO.png': null,
        'img/flags/ES.png': null,
        'img/flags/US.png': null
    }

    var cmds = []
    var baseDir = '/home/ubuntu/snow-web/public/'
    var dirs = ['img', 'img/flags']

    cmds = cmds.concat(dirs.map(function(dir) {
        return 'ssh ubuntu@' + hostname + ' mkdir -p ' + baseDir + dir
    }))

    cmds = cmds.concat(Object.keys(files).map(function(fn) {
        var outName = files[fn] || fn
        return 'scp -C build/' + fn + ' ubuntu@' + hostname + ':' + baseDir + outName
    }))

    jake.exec(cmds, { printStdout: true, printStderr: true }, cb)
}

// publishing
var segment

task('pp', ['publish-prod'])
task('publish-prod', ['clean'], function() {
    segment = 'bc0p8b3ul1'
    jake.Task['dist'].invoke()
    publish('10.0.0.184', function(err) {
        if (err) return complete(err)
        var tag = new Date().toISOString().match(/^[^\.]+/)[0].replace(/:/g, '-')
        exec('git tag ' + tag)
        complete()
    })
}, { async: true })

task('ps', ['publish-staging'])
task('publish-staging', ['clean'], function() {
    segment = '52j6v06i1t'

    jake.Task['dist'].invoke()
    publish('54.217.208.30', complete)
}, { async: true })

// testing
var server

task('test', ['test-host'], function() {
    jake.exec('mocha-phantomjs -R spec http://localhost:5074/test.html', function(res) {
        server.close()
        complete()
    }, {
        printStdout: true
    })
}, { async: true })

file('build/test.html', ['test/support/tests.html'], cpTask)
file('build/test.css', ['node_modules/mocha/mocha.css'], cpTask)

cp('-f', 'test/support/tests.html', 'build/test/index.html')

task('test-host', ['build/test.js', 'build/test.html'], function() {
    var express = require('express')
    , app = express()
    server = require('http').createServer(app)
    app.use(express.static('build'))
    server.listen(5074)
})

file('build/test.js', ['build'].concat(vendor), function() {
    var deps = vendor.slice()
    deps.push('./node_modules/mocha/mocha.js')

    var v = deps.reduce(function(p, c) {
        return p + ';' + cat(c)
    }, '')
    , bundle = exec('browserify -d -t ./node_modules/browserify-ejs ./test/index.js')
    , scripts = v + ';' + bundle
    scripts.to(this.name)
})

task('default', ['clean', 'app'])
