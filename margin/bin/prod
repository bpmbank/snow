var config = require('konfu')
, async = require('async')
, hail = require('hail')
, Flip = require('../flip')
, Margin = require('../index')

var snow = new hail.Snow(config.snow.key)

var errorHandler = function(err) {
    if (err.name == 'InsufficientFunds') {
        return console.error('Failed to place an order, insufficient funds')
    }

    console.error('uncaught error')
    console.error(err)
    console.error(err.stack)

    snow.orders(function(err, orders) {
        if (err) {
            console.error('failed to retrieve orders to cancel everything')
            console.error(err)
            return process.exit(1)
        }

        async.forEach(orders, function(order, next) {
            snow.cancel(order.id, function(err) {
                if (err) {
                    console.error('failed to cancel order %s', order.id)
                    console.error(err)
                } else {
                    console.log('cancelled order %s', order.id)
                }
                next()
            })
        }, function() {
            console.error('exiting process (1)')
            process.exit(1)
        })
    })
}

// Copy LTCBTC from Btc-E.com to Snow BTCLTC
var btce = new hail.Btce(config.btce)
, flip = new Flip(btce)
, margin = new Margin('BTCLTC', flip, snow, {
    volume: 2.5,
    margin: 0.01
})
margin.on('error',  errorHandler)

// Copy BTCXRP from Ripple to Snow BTCXRP
var gox = new hail.MtGox(config.mtgox)
, ripple = new hail.Ripple(config.ripple)
, margin = new Margin('BTCXRP', ripple, snow, {
    volume: 2.5,
    margin: 0.01
})
margin.on('error',  errorHandler)

process.on('uncaughtException', function(err) {
    console.error('unhandled exception in process!')
    errorHandler(err)
})
